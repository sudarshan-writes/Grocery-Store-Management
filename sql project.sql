create database IF NOT EXISTS Grocery;
use Grocery;
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

select * from supplier;

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

select * from categories;


-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

select * from employees;

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);
select * from customers;

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select* from products;

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from orders;

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from order_details;

-- Analysis Questions

-- 1️. Customer Insights

-- 1A)How many unique customers have placed orders?

SELECT 
    COUNT(DISTINCT cust_id) AS unique_customers
FROM
    orders;

-- 1B)Which customers have placed the highest number of orders?

SELECT 
    cust_id, COUNT(*) AS total_orders
FROM
    orders
GROUP BY cust_id
ORDER BY total_orders DESC
limit 5;

-- 1C)What is the total and average purchase value per customer?

SELECT 
    o.cust_id,
    c.cust_name,
    COUNT(*) AS total_orders_count,
    SUM(od.total_price) AS average_order_price,
    AVG(od.total_price) AS average_orders_price
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
        JOIN
    customers c ON o.cust_id = c.cust_id
GROUP BY o.cust_id
ORDER BY o.cust_id ASC;


-- 1D)Who are the top 5 customers by total purchase amount?

SELECT 
    o.cust_id,
    c.cust_name,
    SUM(od.total_price) AS total_orders_price
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
        JOIN
    customers c ON o.cust_id = c.cust_id
GROUP BY o.cust_id
ORDER BY total_orders_price DESC
LIMIT 5;

-- 2. Product Performance

-- 2A)How many products exist in each category?

SELECT 
    c.cat_name, COUNT(*) AS product_count
FROM
    products p
        JOIN
    categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_name
ORDER BY product_count DESC;

-- 2B)What is the average price of products by category?

SELECT 
    c.cat_name, AVG(p.price) AS avg_price_per_category
FROM
    products p
        JOIN
    categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_name
ORDER BY avg_price_per_category DESC;

-- 2C)Which products have the highest total sales volume (by quantity)?

SELECT 
    p.prod_name, SUM(od.quantity) AS total_quantity
FROM
    order_details od
        JOIN
    products p ON od.prod_id = p.prod_id
GROUP BY p.prod_name
ORDER BY total_quantity DESC
LIMIT 5;


-- 2D)What is the total revenue generated by each product?

SELECT 
    p.prod_name, SUM(od.total_price) AS total_revenue
FROM
    order_details od
        JOIN
    products p ON od.prod_id = p.prod_id
GROUP BY p.prod_name
ORDER BY total_revenue DESC;


-- 2E)How do product sales vary by category and supplier?

SELECT 
    c.cat_name, s.sup_name, SUM(od.total_price) AS total_revenue
FROM
    order_details od
        JOIN
    products P ON od.prod_id = p.prod_id
        JOIN
    categories c ON p.cat_id = c.cat_id
        JOIN
    supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_name , s.sup_name
ORDER BY total_revenue DESC
LIMIT 5;

-- 3. Sales and Order Trends

-- 3A)How many orders have been placed in total?
SELECT 
    COUNT(*) AS total_orders
FROM
    order_details;

-- 3B)What is the average value per order?
SELECT 
    od.ord_id, AVG(od.total_price) AS average_orders_price
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY od.ord_id
ORDER BY average_orders_price DESC
LIMIT 5;

-- 3C) On which dates were the most orders placed?

SELECT 
    order_date, COUNT(*) AS orders_count
FROM
    orders
GROUP BY order_date
ORDER BY orders_count DESC
LIMIT 5;

-- 3D) What are the monthly trends in order volume and revenue?

SELECT 
    EXTRACT(MONTH FROM o.order_date) AS order_month,
    COUNT(*) AS total_orders_count,
    SUM(od.quantity) AS volume,
    SUM(od.total_price) AS revenue
FROM
    order_details od
        JOIN
    orders o ON od.ord_id = o.ord_id
GROUP BY order_month
ORDER BY revenue DESC;

-- 3E) How do order patterns vary across weekdays and weekends?

SELECT 
    MONTHNAME(o.order_date) AS order_month,
    DAYNAME(o.order_date) AS order_weekday,
    COUNT(*) AS total_orders_count,
    SUM(od.quantity) AS total_orders_quantity,
    SUM(od.total_price) AS total_orders_price
FROM
    order_details od
        JOIN
    orders o ON od.ord_id = o.ord_id
GROUP BY MONTHNAME(o.order _date) , DAYNAME(o.order_date)
LIMIT 10;


-- . Supplier Contribution

-- 4A)How many suppliers are there in the database?

select count(*) as suppliers from supplier;

-- 4B)Which supplier provides the most products?
SELECT 
    p.sup_id,
    s.sup_name,
    COUNT(p.prod_id) AS total_products_count
FROM
    products p
        JOIN
    supplier s ON p.sup_id = s.sup_id
GROUP BY s.sup_id , s.sup_name
ORDER BY total_products_count desc
LIMIT 1;

-- 4C)What is the average price of products from each supplier?
select p.sup_id,
	   s.sup_name,
        avg(p.price) as average_price_supplier
from products p join supplier s
on p.sup_id = s.sup_id
group by s.sup_id 
order by average_price_supplier desc;
-- 4D)Which suppliers contribute the most to total product sales (by revenue)?
SELECT 
    p.sup_id, s.sup_name, SUM(price) AS revenue
FROM
    products p
        JOIN
    supplier s ON p.sup_id = s.sup_id
GROUP BY s.sup_id
ORDER BY revenue DESC; 

-- 5️. Employee Performance

-- 5A)How many employees have processed orders?
SELECT 
    COUNT(DISTINCT emp_id) AS employees_processed_orders
FROM
    orders;
    
    
-- 5B)Which employees have handled the most orders?
SELECT 
    o.emp_id, e.emp_name, COUNT(*) AS orders_count
FROM
    orders o
        JOIN
    employees e ON o.emp_id = e.emp_id
GROUP BY o.emp_id
ORDER BY orders_count DESC; 


-- 5C)What is the total sales value processed by each employee?
SELECT 
    o.emp_id, e.emp_name, SUM(od.total_price) AS total_sales
FROM
    order_details od
        JOIN
    orders o ON od.ord_id = o.ord_id
        JOIN
    employees e ON o.emp_id = e.emp_id
GROUP BY o.emp_id
ORDER BY total_sales DESC;

-- 5D)What is the average order value handled per employee?
SELECT 
    e.emp_id, e.emp_name, AVG(total_price) AS average_price
FROM
    order_details od
        LEFT JOIN
    orders o ON od.ord_id = o.ord_id
        JOIN
    employees e ON o.emp_id = e.emp_id
GROUP BY o.emp_id;



-- 6️. Order Details Deep Dive


-- 6A)What is the relationship between quantity ordered and total price?
SELECT 
    quantity, SUM(total_price) AS total_quantity_price
FROM
    order_details
GROUP BY quantity
ORDER BY total_quantity_price ASC, quantity ASC; 
-- 6B)What is the average quantity ordered per product?
SELECT 
    od.prod_id, p.prod_name, AVG(od.quantity)
FROM
    order_details od
        JOIN
    products p ON od.prod_id = p.prod_id
GROUP BY prod_id;

-- 6C)How does the unit price vary across products and orders?
SELECT 
    ord_id, prod_id, each_price
FROM
    order_details
ORDER BY prod_id ASC , ord_id ASC;











